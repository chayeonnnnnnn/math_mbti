import streamlit as st
from collections import Counter

# 페이지 설정
st.set_page_config(page_title="수학 성향 MBTI", page_icon="📐")

# 세션 상태 초기화
# 'page': 현재 질문 페이지 인덱스
# 'answers': 사용자의 답변을 저장하는 리스트
if "page" not in st.session_state:
    st.session_state.page = 0
if "answers" not in st.session_state:
    st.session_state.answers = []

# 질문 데이터 (총 12문제)
# 각 질문은 'title', 'code'(선택지에 따른 MBTI 코드), 'question'으로 구성
questions = [
    {"title": "문제 접근", "code": ["L", "R"], "question": "문제를 풀 때, 관련된 공식을 대부분 알고 있거나 떠올릴 수 있다."},
    {"title": "문제 접근", "code": ["L", "R"], "question": "공식으로 문제가 바로 풀리지 않으면, 원리를 떠올려 문제를 풀 수 있다."},
    {"title": "문제 접근", "code": ["L", "R"], "question": "문제를 풀며 '왜 이런 공식이 나왔는지' 그 원리를 스스로 생각해보려 한다."},

    {"title": "풀이 스타일", "code": ["D", "F"], "question": "풀이할 때 중간 계산 과정까지 꼼꼼히 검산하며 푸는 편이다."},
    {"title": "풀이 스타일", "code": ["D", "F"], "question": "정답이 맞더라도 풀이를 다시 확인해보려 한다."},
    {"title": "풀이 스타일", "code": ["D", "F"], "question": "틀린 문제는 원인을 꼼꼼하게 분석하려 한다."},

    {"title": "이해 스타일", "code": ["N", "V"], "question": "개념을 배울 때, 작은 정의나 조건까지 꼼꼼하게 확인하는 편이다."},
    {"title": "이해 스타일", "code": ["N", "V"], "question": "하나의 개념을 세부적으로 쪼개어 이해하려고 노력한다."},
    {"title": "이해 스타일", "code": ["N", "V"], "question": "전체 흐름보다, 세부적인 요소를 먼저 완벽히 이해하려고 한다."},

    {"title": "문제 직면 태도", "code": ["B", "A"], "question": "복잡한 문제를 보면 부담스럽지만 한 번 시도해보려 한다."},
    {"title": "문제 직면 태도", "code": ["B", "A"], "question": "쉽지 않은 문제일수록 도전하려는 마음이 든다."},
    {"title": "문제 직면 태도", "code": ["B", "A"], "question": "어려운 문제도 포기하지 않고 계속 풀어보려 한다."}
]

# 선생님들 데이터 (MBTI 유형과 선생님 이름 매핑)
teacher_data = {
    "곽휘호 선생님": "RDNB", "하진성 선생님": "LDNB", "이미라 선생님": "RFNB",
    "박지오 선생님": "LDNB", "천예현 선생님": "LFNB", "김은정 선생님": "RDNB",
    "최신호 선생님": "LDNB", "유현수 선생님": "RDVA", "민다영 선생님": "RDNA",
    "이희백 선생님": "RDNA", "윤희정 선생님": "LDNB", "박서현 선생님": "RDNB",
    "조한정 선생님": "RDNB", "서민호 선생님": "LFNB", "주진모 선생님": "LDVB"
}

# 유형 결과 데이터 (각 MBTI 유형별 이름, 설명, 팁)
type_data = {
    "LDNB": {
        "name": "🧠📐 원리 장인",
        "desc": ("이 유형은 문제를 풀 때 단순히 공식을 적용하는 것을 넘어, 공식을 직접 유도해보며 개념의 원리부터 파악하려는 성향이 강합니다.\n"
                 "또한 어려운 문제를 만나도 끝까지 시도해보려는 끈기와 도전 정신을 갖고 있어, 깊이 있는 사고를 통해 수학을 탐구하려는 태도가 특징입니다."),
        "tip": ("먼저 개념을 깊이 있게 이해하는 것이 핵심입니다. 공식을 외우기보다는 증명 과정을 따라 써보며 원리를 스스로 납득해보세요.\n"
                "문제를 풀 때도 '왜 이렇게 되는지', '다른 방법은 없을까'를 자주 고민하면서 다양한 접근을 시도하면 사고력이 향상됩니다.\n"
                "또한 고난도 문제나 창의적 문제에 도전하는 것을 두려워하지 말고, 시간 내에 풀지 못해도 과정을 끝까지 따라가며 배움을 얻는 방식이 효과적입니다.\n"
                "스스로 개념을 설명해보거나 친구들에게 가르쳐보는 활동도 학습을 체계화하는 데 큰 도움이 됩니다.")
    },
    "LDNA": {
        "name": "📝🐢 꼼꼼 이론가",
        "desc": ("공식의 원리와 개념을 철저하게 분석하려는 성향이 있으며, 학습 과정에서 실수를 최소화하려는 꼼꼼한 스타일입니다.\n"
                 "하지만 어려운 문제를 마주하면 도전보다는 정확한 문제에 집중하는 편이라 학습 범위 내에서 안정적인 성취를 추구합니다."),
        "tip": ("개념을 이해할 때는 작은 정의 하나도 그냥 넘기지 말고 노트에 정리하며 정리한 개념을 반복해서 점검해보는 학습법이 좋습니다.\n"
                "풀이 과정도 검산과 복습을 통해 정확성을 높이는 데 집중하세요. 어려운 문제보다는 유형을 나눠 반복 훈련하는 것이 안정적인 성취에 도움이 됩니다.\n"
                "시중의 문제집보다는 교과서 중심의 예제 복습과 정석적인 풀이 연습이 효과적입니다.\n"
                "실전에서는 시간이 부족할 수 있으므로, 자주 틀리는 문제나 풀이 시간이 오래 걸리는 문제를 따로 모아두고 집중적으로 훈련하는 것도 추천합니다.")
    },
    "LDVB": {
        "name": "🧱📊 구조 설계자",
        "desc": ("논리적인 원리 이해와 함께 전체 구조를 큰 그림으로 파악하려는 성향이 강합니다.\n"
                 "새로운 문제나 낯선 개념도 원리만 이해하면 스스로 체계를 세워 응용할 수 있으며, 어려운 문제도 논리적으로 해결하려는 시도를 멈추지 않습니다."),
        "tip": ("개념을 단편적으로 외우기보다는 전체 단원 간 흐름을 파악하고 마인드맵이나 구조도로 연결해보는 방식이 효과적입니다.\n"
                "예를 들어 함수 단원과 도형 단원을 연결하거나, 확률과 경우의 수를 실제 예시로 연계해보는 것이 좋습니다.\n"
                "논리적인 증명이나 귀납·연역적 사고를 활용하는 심화 문제 풀이도 잘 맞습니다.\n"
                "혼자 공부할 때는 각 문제를 푼 이유와 접근 방법을 글로 정리해보는 습관을 들이면 추론력이 강화됩니다.")
    },
    "LDVA": {
        "name": "🧭📄 흐름 정리러",
        "desc": ("공식보다는 전체적인 맥락과 흐름을 파악하며 수학 개념을 이해하려고 하며, 어려운 문제보다는 안정적인 문제풀이를 선호하는 편입니다.\n"
                 "개념을 이해한 후 이를 정리하고 체계화하는 데 강점이 있습니다."),
        "tip": ("단원을 공부할 때는 먼저 전체적인 개요를 잡은 후, 각 개념을 키워드 중심으로 요약 정리하는 것이 좋습니다.\n"
                "노트에 정리한 내용을 친구에게 설명하거나, 전체 흐름을 스스로 말로 설명해보면 개념이 정리됩니다.\n"
                "어려운 문제보다 교과서 중심의 문제나 단원 정리 문제를 반복해서 풀면서 틀린 문제를 체크하고 다시 보는 습관을 들이세요.\n"
                "마지막에는 전체 단원을 한 장의 요약노트로 정리해두면 시험 직전 복습에도 유용합니다.")
    },
    "LFNB": {
        "name": "⚡🔍 빠른 전략가",
        "desc": ("공식을 빠르게 적용해보며 문제 풀이에 속도를 내는 데 능숙하고, 동시에 개념을 세부적으로 파악하려는 분석력도 갖추고 있습니다.\n"
                 "이런 유형은 수학적 직관과 전략을 동시에 활용해 고난도 문제도 겁내지 않고 시도하는 특징이 있습니다."),
        "tip": ("문제를 풀기 전, 어떤 전략이 가장 효율적인지를 빠르게 판단하고 적용해보는 전략 중심 학습이 잘 맞습니다.\n"
                "복잡한 문제는 접근 전략을 스스로 정리해보고, 다양한 풀이 방법을 비교하는 연습이 효과적입니다.\n"
                "시간 제한 하에서 문제를 푸는 훈련을 통해 실전 감각을 유지하고, 틀린 문제는 '전략 실패'의 원인을 분석해봐야 합니다.\n"
                "경시 문제나 창의 문제처럼 다양한 사고방식을 요구하는 문제에 정기적으로 도전하면 큰 성장을 기대할 수 있습니다.")
    },
    "LFNA": {
        "name": "🚀📚 빠른 이해러",
        "desc": ("개념을 빠르게 받아들이는 능력이 뛰어나며, 개념을 세부적으로 쪼개 분석해 이해하는 경향이 있습니다.\n"
                 "하지만 난이도가 높은 문제나 복잡한 응용에는 비교적 부담을 느끼는 경우도 있습니다."),
        "tip": ("개념을 빠르게 익힌 후, 다양한 기초 유형 반복 학습을 통해 안정감을 높이는 것이 중요합니다.\n"
                "개념을 정리할 땐, 작은 단위로 나눠 개념 카드를 만들거나 도식화하면 효과적입니다.\n"
                "어려운 문제는 혼자 고민하기보단 친구나 선생님과의 협업을 통해 해석력을 넓히는 것도 좋은 방법입니다.\n"
                "기초 개념 문제 → 변형 문제 → 실전 문제의 3단계 구성으로 학습을 구조화하면 안정적입니다.")
    },
    "LFVB": {
        "name": "🌪️🧩 직관 천재",
        "desc": ("수학적 구조나 문제의 틀을 직관적으로 빠르게 파악하고, 복잡한 문제에도 겁내지 않고 도전하는 스타일입니다.\n"
                 "머릿속에서 전체 흐름을 이미지처럼 잡는 능력이 있으며, 패턴 인식력이 뛰어납니다."),
        "tip": ("복잡한 문제나 창의 문제가 적성에 잘 맞으므로, 수학 올림피아드 문제나 고난도 문제집에 도전해보세요.\n"
                "문제 풀이 후, 단순한 정답 체크보다는 '어떻게 이런 방식이 떠올랐는가'를 메타인지적으로 돌아보는 습관이 중요합니다.\n"
                "수학 개념을 시각적으로 정리하거나 그래프·도식·표로 나타내면 이해도가 더 높아질 수 있습니다.\n"
                "간혹 기본 개념에서 실수할 수 있으므로, 주요 공리나 공식은 정리노트로 따로 챙기세요.")
    },
    "LFVA": {
        "name": "🏃‍♂️📘 스피드 마스터",
        "desc": ("문제를 빠르게 해결하고자 하며, 필요한 개념만 간단히 익힌 후 실전 문제로 바로 넘어가는 스타일입니다.\n"
                 "복잡하고 어려운 문제보다는 시간 안에 정확하게 풀 수 있는 문제에 집중하는 경향이 있습니다."),
        "tip": ("시험 직전 요약 정리본과 기출문제를 반복하며 실전 감각을 키우는 것이 핵심입니다.\n"
                "개념은 이해하되, 깊이 파고들기보다는 시험에 필요한 만큼만 정리하는 것이 효율적입니다.\n"
                "자주 나오는 실수 패턴을 정리한 오류노트를 만들어서 실수 최소화에 집중하세요.\n"
                "실전 시뮬레이션(예: 시간 재며 기출 풀기)을 자주 해보는 것이 실전에서의 자신감으로 이어집니다.")
    },
    "RDNB": {
        "name": "🧾🔎 공식 분석가",
        "desc": ("이 유형은 공식을 빠르게 떠올리고 문제에 바로 적용해보는 습관이 있으며, 문제 풀이 속도가 빠른 편입니다.\n"
                 "하지만 단순 계산만이 아니라 원리를 어느 정도 이해하고 응용해보는 걸 즐기며, 복잡한 문제도 끝까지 도전해보려는 태도를 가지고 있어 실전형 수학 능력을 갖추고 있습니다."),
        "tip": ("많은 문제를 빠르게 풀고 실수한 문제는 반드시 복기하며, 오답노트 정리를 철저히 해보세요.\n"
                "모의고사처럼 시간을 재고 푸는 연습을 많이 하되, 복잡한 응용 문제에도 도전해보는 것을 두려워하지 마세요.\n"
                "틀린 문제를 원리까지 거슬러 올라가 다시 풀어보면 실전 대응력이 높아져요.\n"
                "다양한 유형을 풀되, '이 문제는 왜 이 방식으로 접근했는가?'를 스스로 질문해보는 훈련이 필요합니다.")
    },
    "RDNA": {
        "name": "📘🛡️ 정석 추종자",
        "desc": ("문제를 빠르게 접근하되 실수를 줄이기 위해 세심하게 검토하며 푸는 스타일입니다.\n"
                 "그러나 복잡한 문제나 난해한 접근이 필요한 문제는 피하는 경향이 있어, 학습 범위 내에서 정확성을 추구합니다."),
        "tip": ("풀이 속도와 정확성의 균형을 맞추는 훈련이 필요합니다. 계산 실수를 줄이려면 반복 훈련과 검산 습관이 중요해요.\n"
                "기출문제나 단원별 실전 문제를 여러 번 반복해 풀면서 시간 대비 정답률을 확인해보세요.\n"
                "고난도 문제보다는 유형화된 문제를 반복해 익히고, 실수 패턴을 정리해보면 점점 정확성이 올라갑니다.\n"
                "실수한 문제는 ‘왜 틀렸는가’를 정확하게 짚고, 같은 실수를 방지하기 위한 체크리스트를 만들어두면 좋아요.")
    },
    "RDVB": {
        "name": "🧰📈 유형 설계자",
        "desc": ("속도가 빠르면서도 개념을 전체 구조나 논리 흐름으로 이해하려는 특징이 있습니다.\n"
                 "어려운 문제도 회피하지 않고 도전하며, 문제 해결에 있어 전략적인 접근을 잘합니다."),
        "tip": ("시간 안에 문제를 푸는 훈련과 함께, 각 문제의 접근 전략을 정리해보는 것이 좋습니다.\n"
                "실전 상황을 염두에 두고, 다양한 풀이 전략을 연습해보세요 (예: 역산, 보기 활용, 추론 기반 접근 등).\n"
                "개념 정리보다는 문제 중심의 훈련이 효과적이며, 여러 단원을 넘나드는 통합 문제에 자주 도전해보면 좋습니다.\n"
                "자신의 풀이를 친구나 선생님에게 설명해보면서 논리적 정리를 습관화하면 사고력이 더 정교해집니다.")
    },
    "RDVA": {
        "name": "📂📎 요약 정리왕",
        "desc": ("전체 흐름을 빠르게 파악하고 문제를 감각적으로 접근하는 스타일입니다.\n"
                 "복잡한 문제보다는 직관적이고 빠른 해결이 가능한 문제를 선호하며, 실전에 강한 유형입니다."),
        "tip": ("시험장에서 흔히 나오는 문제들을 중심으로 빈출 유형을 반복 학습하면 성과가 빠르게 올라갑니다.\n"
                "다양한 문제를 풀며 감각을 익히되, 단원별 개념이 어떤 흐름으로 연결되는지 큰 틀을 자주 복습해보세요.\n"
                "실전 문제 풀이 후 오답 정리보다는 전체적인 문제 패턴 파악이 더 효과적인 유형입니다.\n"
                "복잡한 개념은 시각 자료나 도식으로 정리해두고, 최소한의 개념 정리로 문제에 바로 적용하는 연습이 좋습니다.")
    },
    "RFNB": {
        "name": "🥊🧮 실전 파이터",
        "desc": ("공식을 빠르게 적용해 문제를 푸는 속도와 정확성을 동시에 갖추고 있으며,\n"
                 "개념을 분석하여 응용하는 능력도 뛰어납니다. 어려운 문제에도 적극적으로 도전하며,\n"
                 "실전 감각이 매우 강합니다."),
        "tip": ("실전 시험처럼 시간 제한 훈련을 꾸준히 하고, 다양한 유형의 고난도 문제에 도전하세요.\n"
                "자신만의 풀이 방식을 정리하고, 같은 유형의 문제를 다른 방식으로도 풀어보는 연습을 해보세요.\n"
                "특히 틀린 문제를 다시 풀면서 ‘왜 틀렸는가’를 설명해보는 활동은 사고력과 실전력을 함께 키워줍니다.\n"
                "응용력이 중요한 단원(도형의 증명, 함수의 개형 등)은 문제 중심으로 반복하며 익히세요.")
    },
    "RFNA": {
        "name": "🏃‍♀️🔢 공식 스프린터",
        "desc": ("공식이나 문제 해결 방식을 빠르게 익히는 데 능숙하며,\n"
                 "실수를 줄이기 위해 반복적으로 훈련하는 것을 선호합니다.\n"
                 "그러나 복잡한 문제에는 부담을 느껴, 실전 문제 중심으로 학습합니다."),
        "tip": ("자주 출제되는 공식이나 유형만 따로 정리한 단권화 노트를 만들어 반복 학습하세요.\n"
                "개념보다는 자주 나오는 문제 유형 20~30개를 완벽히 마스터하는 것이 훨씬 효과적입니다.\n"
                "실전 시 실수 방지를 위해 자기만의 체크리스트를 정하고 점검하는 습관도 중요합니다.\n"
                "어려운 문제는 넘어가더라도, 기초 개념과 공식만큼은 완벽하게 이해한 상태를 유지하세요.")
    },
    "RFVB": {
        "name": "⚡🧠 직관 해결사",
        "desc": ("문제의 구조를 빠르게 파악하고 직관적으로 해석하는 능력이 뛰어납니다.\n"
                 "어려운 문제도 회피하지 않고 풀어나가며, 분석적인 사고보다는 감각적인 접근을 더 선호합니다."),
        "tip": ("기출 분석을 통해 문제 구조를 익히고 유사한 문제를 빠르게 푸는 훈련을 해보세요.\n"
                "머릿속에 문제 흐름을 이미지처럼 그려보는 시각화 학습이 매우 효과적입니다.\n"
                "설명을 생략한 직관적 풀이 습관이 있을 수 있으므로, 풀이 과정을 말로 표현하는 연습도 병행하면 좋아요.\n"
                "실전 감각 유지를 위해 매주 일정량의 고난도 실전 모의 문제에 도전하세요.")
    },
    "RFVA": {
        "name": "🎯📊 시험 만렙러",
        "desc": ("요점 중심의 학습을 좋아하며, 시험에 자주 나오는 개념만 정리해 실전에서\n"
                 "최대한 성과를 내고자 하는 실용적인 학습자입니다. 응용이나 창의적 사고보다는 효율성과 실전에 강합니다."),
        "tip": ("요약본 + 기출 위주 학습이 가장 잘 맞는 유형입니다.\n"
                "개념보다는 ’이 문제가 어떻게 출제될까?’에 집중하며, 실제 시험 문제를 반복해서 풀어보는 훈련이 중요합니다.\n"
                "문제 유형별로 ‘출제 포인트’를 정리해두고, 시간 내에 푸는 연습을 꾸준히 해야 합니다.\n"
                "어려운 문제를 억지로 파고들기보다는, 맞출 수 있는 문제를 100% 정확하게 풀어내는 전략을 가져가세요.")
    },
}

# 현재 질문 표시
# 모든 질문을 완료하기 전까지는 질문을 표시
if st.session_state.page < len(questions):
    q = questions[st.session_state.page]
    st.header(f"{q['title']} ({st.session_state.page+1}/{len(questions)})")
    st.write(q["question"])

    choice = st.radio("선택하세요:", ["그렇다", "아니다"], key=f"question_{st.session_state.page}")

    if st.button("다음"):
        # 사용자의 선택에 따라 해당 축의 코드(예: 'L' 또는 'R')를 answers 리스트에 추가
        st.session_state.answers.append(q["code"][0] if choice == "그렇다" else q["code"][1])
        st.session_state.page += 1 # 다음 페이지로 이동
        st.rerun() # 페이지 새로고침하여 다음 질문 표시
else:
    # 모든 질문을 완료한 경우 결과 페이지 표시
    st.header("당신의 수학 MBTI 결과")

    # 각 축별 최빈값 도출
    # 각 3문제씩 묶어 해당 축의 최종 MBTI 코드 결정
    L_R = Counter(st.session_state.answers[0:3]).most_common(1)[0][0]
    D_F = Counter(st.session_state.answers[3:6]).most_common(1)[0][0]
    N_V = Counter(st.session_state.answers[6:9]).most_common(1)[0][0]
    B_A = Counter(st.session_state.answers[9:12]).most_common(1)[0][0]

    # 최종 MBTI 코드 조합
    code = L_R + D_F + N_V + B_A

    st.title(f"당신의 수학 MBTI: {code}")

    # 사용자 유형 정보 표시
    if code in type_data:
        result = type_data[code]
        st.markdown(f"### {result['name']} ({code})")
        st.write(f"**성향 요약**: {result['desc']}")
        st.write(f"**추천 공부법**: {result['tip']}")
    else:
        st.error("오류: 정의되지 않은 MBTI 유형입니다. 관리자에게 문의하세요.")

    st.markdown("---")

    # 나와 같은 유형의 선생님 찾기 및 표시
    same_type_teachers = [name for name, t_code in teacher_data.items() if t_code == code]

    if same_type_teachers:
        st.markdown("🔍 **나와 같은 유형의 선생님**")
        for name in same_type_teachers:
            st.write(f"- {name}")
    else:
        st.write("나와 같은 유형의 선생님이 아직 없습니다. 😭")

    st.markdown("---")

    # 모든 선생님 유형 보여주기
    st.markdown("🏫 **우리 학교 선생님들의 유형**")
    for name, t_code in teacher_data.items():
        t_result = type_data.get(t_code) # .get()을 사용하여 키가 없을 경우 오류 방지
        if t_result:
            st.write(f"**{name}**: {t_result['name']} ({t_code})")
        else:
            st.write(f"**{name}**: (유형 정보 없음 - {t_code})")

    st.markdown("---")

    # MBTI 성향 축 설명 표시
    st.subheader("📘 MBTI 성향 축 설명")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**문제 접근 (L / R)**")
        st.write("- L (Logical): 원리부터 분석하며 접근")
        st.write("- R (Rule-based): 공식과 규칙을 바로 적용")

        st.markdown("**풀이 스타일 (D / F)**")
        st.write("- D (Detail): 꼼꼼하고 정확한 풀이 선호")
        st.write("- F (Fast): 빠르게 핵심만 파악해서 풀이")

    with col2:
        st.markdown("**이해 스타일 (N / V)**")
        st.write("- N (aNalytic): 개념을 세부적으로 분석")
        st.write("- V (Visionary): 전체 흐름을 직관적으로 파악")

        st.markdown("**문제 직면 태도 (B / A)**")
        st.write("- B (Breaker): 어려운 문제도 도전")
        st.write("- A (Avoider): 복잡하면 피하는 경향")

    # 처음부터 다시하기 버튼
    if st.button("처음부터 다시하기 🔄"):
        st.session_state.page = 0
        st.session_state.answers = []
        st.rerun()
